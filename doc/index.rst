hic
===

``hic`` is a collection of Python modules for analyzing heavy-ion collision simulation data,
e.g. calculating flow coefficients `v_n` and initial condition eccentricities `\varepsilon_n`.
It's a community project designed to facilitate computational heavy-ion research and reduce code duplication.

``hic`` is under active development on github_, and :ref:`contributions <contributing>` are welcome!

Installation
------------
Requirements: Python 2.7 or 3.3+ with numpy_.

``hic`` is prerelease software.
You can install the development version with pip_::

   pip install git+https://github.com/jbernhard/hic.git

To run the tests, install nose_ and run ::

   nosetests -v hic

Simple examples
---------------
Here are a few quick examples of what ``hic`` can do.

Calculate flow cumulants::

   from hic import flow

   vnk = flow.FlowCumulant(mult, q2, q3)
   v22 = vnk.flow(2, 2)

Randomly sample events with specified flows::

   phi = flow.sample_flow_pdf(mult, v2, v3)

Calculate initial condition eccentricities::

  from hic import initial

  ic = initial.IC(profile, dxy)
  e2 = ic.ecc(2)

User guide
----------
``hic`` consists of several logically distinct modules.
Each has a tutorial with examples and an API reference.

.. note::

   The user guide is a work in progress, and some sections are incomplete.
   More examples and information will be added over time.

.. toctree::
   :maxdepth: 2

   flow
   initial

.. _contributing:

Contributing
------------
``hic`` is a community project---all heavy-ion physicists are encouraged to contribute!
Anything is welcome, from a small code snippet to a completely new module to an extra example for the docs.
Here's a short wish list:

- flow cumulant statistical error
- differential flow
- input/output for common formats (e.g. UrQMD)
- an HBT module
- a heavy-flavor module

Submit contributions through the github fork & pull request system.
Create a fork_, clone it, and install ``hic`` in editable mode::

   git clone git@github.com:USERNAME/hic.git
   pip install --user -e hic

Please follow these general coding guidelines:

- Mimic the existing code structure and style.
  If it makes logical sense, create a new module with tests and docs, e.g. a module ``hello`` should have source file ``hic/hello.py``, tests ``hic/test/test_hello.py``, and docs ``doc/hello.rst``.

- Write descriptive docstrings and examples.
  Docs are generated by sphinx_.

- Write high-coverage unit tests.
  Install nose_ and coverage_, then the easiest way to simultaneously run tests and check coverage is ::

   nosetests -v --with-coverage --cover-package=hic

- Follow the :PEP:`8` style guide.
  Check for errors with flake8_.

- Make topic branches and submit a `pull request`_ for each branch.

.. _github: https://github.com/jbernhard/hic
.. _issue: https://github.com/jbernhard/hic/issues
.. _pull request: https://github.com/jbernhard/hic/pulls
.. _fork: https://help.github.com/articles/fork-a-repo
.. _numpy: http://www.numpy.org
.. _pip: https://pip.pypa.io
.. _nose: https://nose.readthedocs.org
.. _coverage: http://nedbatchelder.com/code/coverage
.. _flake8: http://flake8.readthedocs.org
.. _sphinx: http://sphinx-doc.org
