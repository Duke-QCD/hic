Initial conditions
==================
The ``initial`` module is for initial condition profiles.
These profiles are typically generated by Monte Carlo initial condition models for input to hydrodynamics.

The central class is ``hic.initial.IC``.
It takes an IC energy or entropy density profile and calculates relevant properties.
Let's fabricate a smooth profile::

   import numpy as np
   X, Y = np.mgrid[-10.:10.1:.1, -10.:10.1:.1]
   Z = np.exp(-(.2*X*X + .3*Y*Y))

This profile ``Z`` is a two-dimensional Gaussian, wider in the *y*-direction than *x*.
It's evaluated on a 201x201 grid from -10 to 10 fm in steps of 0.1 fm.
Now let's create an ``IC`` class from this profile::

   from hic import initial
   ic = initial.IC(Z, 0.1)  # second arg is grid spacing

The center of mass of the profile should be zero within numerical precision::

   cm = ic.cm()

The total entropy (or energy) of the profile is the Riemann sum of the grid, i.e. the sum of all grid cells multiplied by the grid cell area::

   total = ic.sum()

Eccentricity harmonics
----------------------
The ``IC`` class is most useful for calculating eccentricity harmonics `\varepsilon_n`, defined by

.. math::

   \varepsilon_n e^{i n\phi} = -\frac{\int dx \, dy\, r^n e^{i n \phi} \, S}{\int dx \, dy \, r^n \, S},

where `S` is the entropy (or energy) profile and the integrals are taken over the entire profile relative to the center of mass.
Numerically, the integrals are of course implemented as Riemann sums.
Continuing with the above example, the ellipticity `\varepsilon_2` is ::

   e2 = ic.ecc(2)

It should be about 0.2.
The triangularity (and all odd-order harmonics) should be zero within numerical precision::

   np.allclose([ic.ecc(n) for n in range(3, 10, 2)], 0)  # True

Reference
---------
.. automodule:: hic.initial
   :members:
